# `environment` is the environment of the Node, possible values are `development` and `production`.
# DO NOT change this value except for local debugging purposes.
environment: production

# `discovery` is used for Node discovery and verification.
discovery:
  operator:
    # `evm_address` is the wallet address used during your registration on the RSS3 Explorer.
    evm_address: 0x...address
    # The `signature` obtained during registration, it will be used to verify your ownership of this Node.
    # You MUST NOT share the signature with anyone.
    signature: 0x...signature
  server:
    # `endpoint` is how Global Indexers access your Node.
    # You can use a domain or an IP address.
    endpoint: https://your.node.com
    # If your Node is registered on the VSL Testnet, use https://gi.rss3.dev.
    # Otherwise, DO NOT change this value.
    global_indexer_endpoint: https://gi.rss3.io
    # Use access_token to protect your Node from unauthorized access.
    access_token: your_access_token

# Database configuration
database:
  # `coverage_period` is the number of months that the database will store the data, which cannot be less than three months.
  coverage_period: 3
  # `uri` is the connection string of the database.
  uri: postgres://postgres:password@localhost:5432/postgres

# A redis is required for monitor service and will significantly improve the indexing performance of some workers.
redis:
  endpoint: localhost:6379
  username:
  password:

# `endpoints` are data access points for Workers.
# Endpoints defined here can be referenced in the configuration below.
# For example,
# - Blockchain networks require RPC endpoints,
# - Arweave requires a gateway endpoint,
# - Farcaster requires a Hubble.
# - Mastodon requires a mastodon instance.
endpoints:
  vsl:
    url: https://rpc.rss3.io
  arweave:
    url: https://arweave.net
  mastodon:
    url: your-kafka-ip:9092

# `component` is used to split different types of networks.
component:
  # `rss` network type includes the worker indexing data in RSS format.
  rss:
    id: rsshub-core
    network: rsshub
    worker: core
    endpoint: https://your.rsshub.com/
    parameters:
      authentication:
        access_key:
  # `ai` type includes the worker indexing data in AI format.
  ai:
    id: ai-core
    worker: core
    endpoint: https://your.agentdata.com/

  # `decentralized` network type includes workers indexing data from decentralized networks such as blockchain networks, Arweave, etc.
  decentralized:
    # Each configuration here initializes a worker.
    # `id` is the unique identifier
    - id: vsl-core
      # `network` is the network that the worker is indexing from.
      network: vsl
      # `endpoint` is the data access endpoint used by the worker.
      # You can reference the endpoint defined above in the `endpoints` section.
      # You can also use a direct URL, such as `https://rpc.rss3.io`.
      endpoint: vsl
      # `worker` is the actual worker that processes the data.
      # You can find the list of available workers here: https://github.com/RSS3-Network/Node/blob/develop/README.md#supported-networks-and-workers.
      worker: core
    - id: arweave-mirror
      network: arweave
      endpoint: arweave
      worker: mirror
      # `ipfs_gateways` is used to specify the IPFS gateways used by the worker.
      # Supplying multiple gateways may improve the indexing performance and reliability.
      ipfs_gateways:
        - https://ipfs.io
        - https://cloudflare-ipfs.com
      parameters:
        # `concurrent_block_requests` is used to specify the number of concurrent block requests.
        concurrent_block_requests: 2
  # `federated` network type includes workers indexing data from federated networks such as ActivityPub, Atprotocol.
  federated:
    # mastodon
    - id: mastodon-mastodon
      network: mastodon
      worker: mastodon
      endpoint: mastodon
      parameters:
        relay_url_list: [ "https://relay.fedi.buzz/instance/mastodon.social"]
        port: 8181
    # bluesky
    - id: bluesky-bluesky
      network: bluesky
      worker: bluesky
      endpoint:
      parameters:
        username:
        password:
