package paragraph_test

import (
	"context"
	"testing"

	"github.com/rss3-network/node/v2/config"
	source "github.com/rss3-network/node/v2/internal/engine/protocol/arweave"
	worker "github.com/rss3-network/node/v2/internal/engine/worker/decentralized/contract/paragraph"
	"github.com/rss3-network/node/v2/provider/arweave"
	workerx "github.com/rss3-network/node/v2/schema/worker/decentralized"
	activityx "github.com/rss3-network/protocol-go/schema/activity"
	"github.com/rss3-network/protocol-go/schema/metadata"
	"github.com/rss3-network/protocol-go/schema/network"
	"github.com/rss3-network/protocol-go/schema/tag"
	"github.com/rss3-network/protocol-go/schema/typex"
	"github.com/shopspring/decimal"
	"github.com/stretchr/testify/require"
)

func TestWorker_Arweave(t *testing.T) {
	t.Parallel()

	type arguments struct {
		task   *source.Task
		config *config.Module
	}

	testcases := []struct {
		name      string
		arguments arguments
		want      *activityx.Activity
		wantError require.ErrorAssertionFunc
	}{
		{
			name: "Paragraph Post",
			arguments: arguments{
				task: &source.Task{
					Network: network.Arweave,
					Block: arweave.Block{
						Timestamp: 1697091466,
					},
					Transaction: arweave.Transaction{
						ID:       "Sz5fY8Loj67fWxLQv98r5U5-h2aIA5x4FMsAVP1N2ig",
						Reward:   "212017846",
						Quantity: "0",
						Owner:    "rsfrA1_2H7Pb4kRtHj6EryEELG1sksd-1xGbAWJJqgCIJs9dQYL2C7afuCFX-pryKFpU3ZLssERyObt-BiDwWA3vSHAFljt0CbCBZRKqWKWeEXXdoBLR_Vf8724P14YqRubW7a0n6UaZKsJsxah35yPCANnw9QbnHJouTlNyky41ZnbBClRlYWr1_PkEMvFEsQcqIE5J8jcgJlaTNtiOi7ruvRP3z-NtqufuJFFq3_4hrL6ICpbJnZBgZuX33tr6YvCrYExtFmd8wJoL4s6MSioKYSWYk60ngr8EgUHotS1lzPemWRhY9wjbrg3wh00sCO44wv5CmE2Ke-EoKZYKrUu8g5z2MlPwOnNxBj67wzrSRzkpaVvbEWqneEwG_UcDxKU_SLeJ0_qGLNkQjgqjhfAAEdivsfV0Fz3hNRmVu2ae84QtoPQyvvcr2JLe-bTjbGvna_C52fR7-p9sp-MlZnL8vPnKfPZrTvfCOd935O2_CdiyzvOA35jQKQhe5UhqwH0hoYdplE2DHRN6MR42n-8nq3vqxp7Y34l-aUxnRIHBquMFbfH4KKn8N322_e_6nAwImjp_DziPhz5xOyQJgZOzCBTFuQrbaHkGbQ6ou814fyAUDJlA3S5-WKtsD8Jk1AMg0YmIdFUgCVUwwepoAgK1UPAxpq64GouKmnqjI58",
						Data:     "",
						// Tag [{Name:QXBwTmFtZQ Value:UGFyYWdyYXBo} {Name:Q29udGVudC1UeXBl Value:YXBwbGljYXRpb24vanNvbg} {Name:Q29udHJpYnV0b3I Value:MHg1NDJFNEMzYjRhMURDRTBBMUVjYTdCYkMxNDc1NEE4NjdkNjE4NzhB} {Name:UG9zdElk Value:WWVDaWRDVzBNajlRcmo2aEo4Z1g} {Name:Q2F0ZWdvcnk Value:ZGF0YQ} {Name:UG9zdFNsdWc Value:bXktZmlyc3QtY29udGVudA} {Name:UHVibGljYXRpb25JZA Value:ZHFVUTljSnMxc29NQVY3R0lCQjQ} {Name:UHVibGljYXRpb25TbHVn Value:QHl1LXRlc3Q}]
						Tags: []arweave.Tag{
							{Name: "QXBwTmFtZQ", Value: "UGFyYWdyYXBo"},
							{Name: "Q29udGVudC1UeXBl", Value: "YXBwbGljYXRpb24vanNvbg"},
							{Name: "Q29udHJpYnV0b3I", Value: "MHg1NDJFNEMzYjRhMURDRTBBMUVjYTdCYkMxNDc1NEE4NjdkNjE4NzhB"},
							{Name: "UG9zdElk", Value: "WWVDaWRDVzBNajlRcmo2aEo4Z1g"},
							{Name: "Q2F0ZWdvcnk", Value: "ZGF0YQ"},
							{Name: "UG9zdFNsdWc", Value: "bXktZmlyc3QtY29udGVudA"},
							{Name: "UHVibGljYXRpb25JZA", Value: "ZHFVUTljSnMxc29NQVY3R0lCQjQ"},
							{Name: "UHVibGljYXRpb25TbHVn", Value: "QHl1LXRlc3Q"},
						},
					},
				},
				config: &config.Module{
					IPFSGateways: []string{"https://ipfs.rss3.page/"},
				},
			},
			want: &activityx.Activity{
				ID:       "Sz5fY8Loj67fWxLQv98r5U5-h2aIA5x4FMsAVP1N2ig",
				Network:  network.Arweave,
				Index:    0,
				From:     "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
				To:       "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
				Type:     typex.SocialPost,
				Platform: workerx.PlatformParagraph.String(),
				Fee: &activityx.Fee{
					Amount:  decimal.NewFromInt(212017846),
					Decimal: 12,
				},
				Actions: []*activityx.Action{
					{
						Type:     typex.SocialPost,
						Tag:      tag.Social,
						Platform: workerx.PlatformParagraph.String(),
						From:     "0x542E4C3b4a1DCE0A1Eca7BbC14754A867d61878A",
						To:       "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
						Metadata: &metadata.SocialPost{
							Handle:  "yu-test",
							Title:   "Yu Test Post",
							Summary: "that's my first post herethat's the content",
							Body:    "that's my first post here\n=========================\n\n![](https://storage.googleapis.com/papyrus_images/97f37be742252a2da50ab9ac0f3a4851.jpg)\n\nthat's the content",
							Media: []metadata.Media{
								{
									Address:  "https://storage.googleapis.com/papyrus_images/f9d95e6eded4d00a4d752f4d004c1c29.jpg",
									MimeType: "image/jpeg",
								},
							},
							ProfileID:     "mKwDzWEHQDof8Hpw9pyr",
							PublicationID: "my-first-content",
							ContentURI:    "https://arweave.net/Sz5fY8Loj67fWxLQv98r5U5-h2aIA5x4FMsAVP1N2ig",
							Tags:          []string{"data"},
							Timestamp:     1697091375,
						},
					},
				},
				Status:    true,
				Timestamp: 1697091466,
			},
			wantError: require.NoError,
		},
		{
			name: "Paragraph Revise",
			arguments: arguments{
				task: &source.Task{
					Network: network.Arweave,
					Block: arweave.Block{
						Timestamp: 1697092032,
					},
					Transaction: arweave.Transaction{
						ID:       "Xf7C--gk4hlH3mG0UnFiISYgOdymfInv2EgeOF0GeNg",
						Reward:   "212017846",
						Quantity: "0",
						Owner:    "rsfrA1_2H7Pb4kRtHj6EryEELG1sksd-1xGbAWJJqgCIJs9dQYL2C7afuCFX-pryKFpU3ZLssERyObt-BiDwWA3vSHAFljt0CbCBZRKqWKWeEXXdoBLR_Vf8724P14YqRubW7a0n6UaZKsJsxah35yPCANnw9QbnHJouTlNyky41ZnbBClRlYWr1_PkEMvFEsQcqIE5J8jcgJlaTNtiOi7ruvRP3z-NtqufuJFFq3_4hrL6ICpbJnZBgZuX33tr6YvCrYExtFmd8wJoL4s6MSioKYSWYk60ngr8EgUHotS1lzPemWRhY9wjbrg3wh00sCO44wv5CmE2Ke-EoKZYKrUu8g5z2MlPwOnNxBj67wzrSRzkpaVvbEWqneEwG_UcDxKU_SLeJ0_qGLNkQjgqjhfAAEdivsfV0Fz3hNRmVu2ae84QtoPQyvvcr2JLe-bTjbGvna_C52fR7-p9sp-MlZnL8vPnKfPZrTvfCOd935O2_CdiyzvOA35jQKQhe5UhqwH0hoYdplE2DHRN6MR42n-8nq3vqxp7Y34l-aUxnRIHBquMFbfH4KKn8N322_e_6nAwImjp_DziPhz5xOyQJgZOzCBTFuQrbaHkGbQ6ou814fyAUDJlA3S5-WKtsD8Jk1AMg0YmIdFUgCVUwwepoAgK1UPAxpq64GouKmnqjI58",
						Data:     "",
						Tags: []arweave.Tag{
							{Name: "QXBwTmFtZQ", Value: "UGFyYWdyYXBo"},
							{Name: "Q29udGVudC1UeXBl", Value: "YXBwbGljYXRpb24vanNvbg"},
							{Name: "Q29udHJpYnV0b3I", Value: "MHg1NDJFNEMzYjRhMURDRTBBMUVjYTdCYkMxNDc1NEE4NjdkNjE4NzhB"},
							{Name: "UG9zdElk", Value: "ZzZHMmxoRG1TbE5OQ3BlcGltREU"},
							{Name: "Q2F0ZWdvcnk", Value: "ZGF0YQ"},
							{Name: "UG9zdFNsdWc", Value: "bXktZmlyc3QtY29udGVudA"},
							{Name: "UHVibGljYXRpb25JZA", Value: "ZHFVUTljSnMxc29NQVY3R0lCQjQ"},
							{Name: "UHVibGljYXRpb25TbHVn", Value: "QHl1LXRlc3Q"},
						},
					},
				},
				config: &config.Module{
					IPFSGateways: []string{"https://ipfs.rss3.page/"},
				},
			},
			want: &activityx.Activity{
				ID:       "Xf7C--gk4hlH3mG0UnFiISYgOdymfInv2EgeOF0GeNg",
				Network:  network.Arweave,
				Index:    0,
				From:     "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
				To:       "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
				Type:     typex.SocialRevise,
				Platform: workerx.PlatformParagraph.String(),
				Fee: &activityx.Fee{
					Amount:  decimal.NewFromInt(212017846),
					Decimal: 12,
				},

				Actions: []*activityx.Action{
					{
						Type:     typex.SocialRevise,
						Tag:      tag.Social,
						Platform: workerx.PlatformParagraph.String(),
						From:     "0x542E4C3b4a1DCE0A1Eca7BbC14754A867d61878A",
						To:       "w5AtiFsNvORfcRtikbdrp2tzqixb05vdPw-ZhgVkD70",
						Metadata: &metadata.SocialPost{
							Handle:  "yu-test",
							Title:   "Yu Test Post",
							Summary: "that's my first post herethat's the content",
							Body:    "that's my second post here(revised)\n===================================\n\n![](https://storage.googleapis.com/papyrus_images/97f37be742252a2da50ab9ac0f3a4851.jpg)\n\nthat's the content",
							Media: []metadata.Media{
								{
									Address:  "https://storage.googleapis.com/papyrus_images/f9d95e6eded4d00a4d752f4d004c1c29.jpg",
									MimeType: "image/jpeg",
								},
							},
							ProfileID:     "mKwDzWEHQDof8Hpw9pyr",
							PublicationID: "my-first-content",
							ContentURI:    "https://arweave.net/Xf7C--gk4hlH3mG0UnFiISYgOdymfInv2EgeOF0GeNg",
							Tags:          []string{"data"},
							Timestamp:     1697091629,
						},
					},
				},
				Status:    true,
				Timestamp: 1697092032,
			},
			wantError: require.NoError,
		},
	}

	for _, testcase := range testcases {
		testcase := testcase

		t.Run(testcase.name, func(t *testing.T) {
			t.Parallel()

			ctx := context.Background()

			instance, err := worker.NewWorker(testcase.arguments.config)
			require.NoError(t, err)

			activity, err := instance.Transform(ctx, testcase.arguments.task)
			testcase.wantError(t, err)

			// t.Log(string(lo.Must(json.MarshalIndent(activity, "", "\x20\x20"))))

			require.Equal(t, testcase.want, activity)
		})
	}
}
